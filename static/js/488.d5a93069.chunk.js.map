{"version":3,"file":"static/js/488.d5a93069.chunk.js","mappings":"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","sources":["components/Title/Title.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { memo } from 'react';\nimport './Title.css';\nimport PropTypes from 'prop-types';\n\nconst Title = ({ text }) => {\n  return <h2 className=\"title\">{text}</h2>;\n};\n\nTitle.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default memo(Title);\n","import React, { memo, useState } from 'react';\nimport './ContactForm.css';\nimport Notiflix from 'notiflix';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { postContact } from 'redux/operations';\nimport { selectContacts, tokenUser } from 'redux/selectors';\n\nconst fieldIdName = nanoid();\nconst fieldIdNumber = nanoid();\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const { items: contacts } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const token = useSelector(tokenUser);\n\n  const checkContactName = () => {\n    return contacts.some(el => el.name === name);\n  };\n\n  const onChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.warn('Échale un vistazo');\n        break;\n    }\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (checkContactName()) {\n      Notiflix.Notify.failure(`${name} ya esta en contactos.`);\n      return;\n    }\n\n    const obj = {\n      name,\n      number,\n      token,\n    };\n\n    dispatch(postContact(obj));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <div className='containerform'>\n        <form className=\"formInput\" onSubmit={onSubmit}>\n          <div className=\"input\">\n            <label htmlFor={fieldIdName}>Nombre</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              id={fieldIdName}\n              onChange={onChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"El nombre puede contener solo letras, apóstrofe, guión y espacios. Por ejemplo Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </div>\n          <div className=\"input\">\n            <label htmlFor={fieldIdNumber}>Numero</label>\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              id={fieldIdNumber}\n              onChange={onChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"El número de teléfono debe ser dígitos y puede contener espacios, guiones, paréntesis y puede comenzar con +\"\n              required\n            />\n          </div>\n          <button className=\"button\" type=\"submit\">\n            Agregar contacto\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default memo(ContactForm);\n","import './Filter.css';\nimport { nanoid } from 'nanoid';\nimport { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nconst fieldIdFilter = nanoid();\n\nfunction Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'filter':\n        dispatch(changeFilter(value));\n        break;\n\n      default:\n        console.warn('Revisa el campo');\n        break;\n    }\n  };\n\n  return (\n    <>\n      <label className=\"leb\" htmlFor={fieldIdFilter}>\n        Find contacts by name\n      </label>\n      <input\n        className=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        id={fieldIdFilter}\n        onChange={onChange}\n      />\n    </>\n  );\n}\n\nexport default memo(Filter);\n","import { memo } from 'react';\nimport './ContactList.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { delContact } from 'redux/operations';\nimport { selectContacts, selectFilter, tokenUser } from 'redux/selectors';\n\nfunction ContactList() {\n  const { items: contacts } = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const token = useSelector(tokenUser);\n\n  const onClickFunc = e => {\n    dispatch(delContact({ id: e.target.closest('li').dataset.id, token }));\n  };\n\n  const filterFunc = () => {\n    return contacts.filter(el =>\n      el.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const filterMass = filterFunc();\n\n  return (\n    <ul className=\"list\">\n      {filterMass.map(({ name, id, number: phone }) => (\n        <li key={id} data-id={id}>\n          <span className=\"name\">{name}:</span> <span>{phone}</span>\n          <button className=\"buttonList\" type=\"button\" onClick={onClickFunc}>\n            delete\n          </button>\n        </li>\n      ))}\n\n      {!filterMass[0] && <li>Not found!</li>}\n    </ul>\n  );\n}\n\nexport default memo(ContactList);\n","import React, { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/operations';\nimport { selectContacts, tokenUser } from 'redux/selectors';\nimport Title from 'components/Title/Title';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nexport default function Contacts() {\n  const { items: contacts, isLoading, error } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const token = useSelector(tokenUser);\n\n  useEffect(() => {\n    dispatch(getContacts(token));\n  }, [dispatch, token]);\n\n  return (\n    <div className=\"form\">\n      <Title text=\"Phonebook\" />\n      <ContactForm />\n      {!isLoading && contacts[0] && (\n        <>\n          <Title text=\"Contacts\" />\n          <Filter />\n          <ContactList />\n        </>\n      )}\n\n      {isLoading && <div style={{borderRadius:\".25rem\", margin:\"1rem\", color:\"white\", fontSize:\"50px\"}}>Loading data...</div>}\n      {error && <div style={{ margin: 20 }}>{error}</div>}\n    </div>\n  );\n}\n"],"names":["Title","text","className","memo","fieldIdName","nanoid","fieldIdNumber","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","selectContacts","items","dispatch","useDispatch","token","tokenUser","onChange","e","target","value","console","warn","onSubmit","preventDefault","some","el","Notiflix","obj","postContact","htmlFor","type","id","pattern","title","required","fieldIdFilter","Filter","filter","selectFilter","changeFilter","ContactList","onClickFunc","delContact","closest","dataset","filterMass","toLowerCase","includes","map","phone","onClick","Contacts","isLoading","error","useEffect","getContacts","style","borderRadius","margin","color","fontSize"],"sourceRoot":""}